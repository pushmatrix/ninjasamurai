// Generated by CoffeeScript 1.6.1
(function() {
  var Player;

  Player = (function() {

    function Player() {
      this.position = {
        x: 548,
        y: 570
      };
      this.tile = {
        row: 0,
        col: 0
      };
      this.speed = 7;
      this.angle = 0;
      this.size = 24;
      this.direction = new Vector();
    }

    Player.prototype.update = function() {
      var col, distance, dx, dy, enemy, nextPosition, oldPosition, row, toEnemy, _i, _len, _ref, _results;
      nextPosition = {
        x: this.position.x,
        y: this.position.y
      };
      if (KeyHandler.isDown('w')) {
        nextPosition.y -= this.speed;
      }
      if (KeyHandler.isDown('s')) {
        nextPosition.y += this.speed;
      }
      if (KeyHandler.isDown('a')) {
        nextPosition.x -= this.speed;
      }
      if (KeyHandler.isDown('d')) {
        nextPosition.x += this.speed;
      }
      dx = KeyHandler.mouse.x - this.position.x;
      dy = KeyHandler.mouse.y - this.position.y;
      this.angle = Math.atan2(dy, dx);
      oldPosition = {
        x: this.position.x,
        y: this.position.y
      };
      row = Math.floor(nextPosition.y / Tile.size);
      col = Math.floor(this.position.x / Tile.size);
      if (game.level.tiles[row][col].type === ".") {
        this.position.y = nextPosition.y;
      }
      row = Math.floor(this.position.y / Tile.size);
      col = Math.floor(nextPosition.x / Tile.size);
      if (game.level.tiles[row][col].type === ".") {
        this.position.x = nextPosition.x;
      }
      row = Math.floor(this.position.y / Tile.size);
      col = Math.floor(this.position.x / Tile.size);
      this.direction.x = Math.cos(this.angle);
      this.direction.y = Math.sin(this.angle);
      if (KeyHandler.mousePressed) {
        _ref = game.enemies;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          enemy = _ref[_i];
          distance = enemy.toPlayer.magnitude();
          if (distance < Tile.size + 20) {
            toEnemy = new Vector(enemy.position.x - this.position.x, enemy.position.y - this.position.y);
            if (this.direction.angleBetween(toEnemy) < 30) {
              _results.push(enemy.alive = false);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    Player.prototype.render = function() {
      game.context.beginPath();
      game.context.fillStyle = "#333";
      game.context.translate(this.size * 0.5, this.size * 0.5);
      game.context.rotate(-this.angle);
      game.context.translate(-this.position.x, -this.position.y);
      game.context.rect(0, 0, this.size, this.size);
      if (KeyHandler.mousePressed) {
        game.context.rect(this.size, 18, 28, 4);
      } else {
        game.context.rect(this.size, 18, 15, 4);
      }
      game.context.resetTransform();
      return game.context.fill();
    };

    return Player;

  })();

  window.Player = Player;

}).call(this);
