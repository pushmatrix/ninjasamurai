// Generated by CoffeeScript 1.6.1
(function() {
  var Enemy;

  Enemy = (function() {

    function Enemy(x, y) {
      this.position = {
        x: x || 400,
        y: y || 460
      };
      this.speed = 4;
      this.angle = 0;
      this.rotation = Math.PI;
      this.target = null;
      this.waypoints = [];
      this.size = 24;
      this.color = "#ff99ee";
      this.spotted = false;
      this.alive = 1;
      this.direction = new Vector();
      this.toPlayer = new Vector();
    }

    Enemy.prototype.update = function() {
      var col, dx, dy, moveX, moveY, path, row, waypoint;
      this.toPlayer.x = game.player.position.x - this.position.x;
      this.toPlayer.y = game.player.position.y - this.position.y;
      this.direction.x = Math.cos(this.rotation);
      this.direction.y = Math.sin(this.rotation);
      if (this.alive) {
        if (game.level.findIntersection(this.position.x, this.position.y, game.player.position.x, game.player.position.y)) {
          if (this.toPlayer.angleBetween(this.direction) < 80) {
            this.color = "#0099ff";
            this.spotted = true;
          }
        } else {
          this.color = "#ff99ee";
          this.spotted = false;
        }
        if (this.spotted) {
          row = Math.floor(this.position.y / Tile.size);
          col = Math.floor(this.position.x / Tile.size);
          this.playerRow = Math.floor(game.player.position.y / Tile.size);
          this.playerCol = Math.floor(game.player.position.x / Tile.size);
          if (this.playerRow !== this.oldPlayerRow || this.playerCol !== this.oldPlayerCol) {
            this.oldPlayerCol = this.playerCol;
            this.oldPlayerRow = this.playerRow;
            path = new Pathfinder(col, row, this.playerCol, this.playerRow);
            this.waypoints = path.path;
            if (waypoint = this.waypoints.pop()) {
              this.target = {
                x: waypoint[0] * Tile.size + Tile.size * 0.5,
                y: waypoint[1] * Tile.size + Tile.size * 0.5
              };
            }
          }
          if (this.target) {
            dx = this.target.x - this.position.x;
            dy = this.target.y - this.position.y;
            if ((Math.abs(dx) < 5) && (Math.abs(dy) < 5)) {
              this.position.x = this.target.x;
              this.position.y = this.target.y;
              if (waypoint = this.waypoints.pop()) {
                this.target = {
                  x: waypoint[0] * Tile.size + Tile.size * 0.5,
                  y: waypoint[1] * Tile.size + Tile.size * 0.5
                };
              }
            } else {
              this.angle = Math.atan2(dy, dx);
              moveX = this.speed * Math.cos(this.angle);
              moveY = this.speed * Math.sin(this.angle);
              this.position.x += moveX;
              this.position.y += moveY;
            }
          }
          return this.rotation += (this.angle - this.rotation) / 6;
        }
      } else {
        return this.color = "000";
      }
    };

    Enemy.prototype.render = function() {
      game.context.beginPath();
      game.context.fillStyle = this.color;
      game.context.translate(this.size * 0.5, this.size * 0.5);
      game.context.rotate(-this.rotation);
      game.context.translate(-this.position.x, -this.position.y);
      game.context.rect(0, 0, this.size, this.size);
      game.context.rect(this.size, 18, 20, 4);
      game.context.resetTransform();
      return game.context.fill();
    };

    return Enemy;

  })();

  window.Enemy = Enemy;

}).call(this);
