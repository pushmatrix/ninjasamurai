// Generated by CoffeeScript 1.6.1
(function() {
  var Level;

  Level = (function() {

    function Level(map) {
      this.map = map;
      this.rows = 20;
      this.cols = 20;
      this.tiles = [];
      this.buildTiles();
    }

    Level.prototype.buildTiles = function() {
      var col, index, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
        this.tiles[row] = [];
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.cols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            index = row * this.rows + col;
            _results1.push(this.tiles[row][col] = new Tile({
              type: this.map[index],
              row: row,
              col: col
            }));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Level.prototype.render = function() {
      var col, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.cols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.tiles[row][col].render());
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Level.prototype.getTile = function(row, col) {
      return this.tiles[row][col];
    };

    Level.prototype.visit = function(x, y) {
      var col, collision, row;
      row = Math.floor(y / Tile.size);
      col = Math.floor(x / Tile.size);
      collision = game.level.map[row * game.level.rows + col] !== ".";
      if (!collision) {
        game.level.tiles[row][col].fill = "eee";
      }
      return !collision;
    };

    Level.prototype.findIntersection = function(x0, y0, x1, y1) {
      var dx, dy, error, n, x, xInc, y, yInc;
      dx = Math.abs(x1 - x0);
      dy = Math.abs(y1 - y0);
      x = Math.floor(x0);
      y = Math.floor(y0);
      n = 1;
      error = xInc = yInc = 0;
      if (dx === 0) {
        xInc = 0;
        error = Infinity;
      } else if (x1 > x0) {
        xInc = 1;
        n += Math.floor(x1) - x;
        error = (Math.floor(x0) + 1 - x0) * dy;
      } else {
        xInc = -1;
        n += x - Math.floor(x1);
        error = (x0 - Math.floor(x0)) * dy;
      }
      if (dy === 0) {
        yInc = 0;
        error -= Infinity;
      } else if (y1 > y0) {
        yInc = 1;
        n += Math.floor(y1) - y;
        error -= (Math.floor(y0) + 1 - y0) * dx;
      } else {
        yInc = -1;
        n += y - Math.floor(y1);
        error -= (y0 - Math.floor(y0)) * dx;
      }
      while (n > 0) {
        --n;
        if (!this.visit(x, y)) {
          return false;
        }
        if (error > 0) {
          y += yInc;
          error -= dx;
        } else {
          x += xInc;
          error += dy;
        }
      }
      return true;
    };

    return Level;

  })();

  window.Level = Level;

}).call(this);
